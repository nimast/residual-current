/**
 * build-svg.js
 * 
 * Creates a vector-based SVG file from a p5.js sketch
 * Usage: node build-svg.js <path-to-sketch>
 */

const fs = require('fs');
const path = require('path');
const { JSDOM } = require('jsdom');
const acorn = require('acorn');
const walk = require('acorn-walk');

// Check if we have a sketch file path
const sketchPath = process.argv[2];
if (!sketchPath) {
  console.error('Please provide a path to a p5.js sketch file');
  process.exit(1);
}

// Check if the file exists
if (!fs.existsSync(sketchPath)) {
  console.error(`File not found: ${sketchPath}`);
  process.exit(1);
}

// Read the sketch file
const sketchCode = fs.readFileSync(sketchPath, 'utf-8');

// Create a virtual DOM environment
const dom = new JSDOM(`
<!DOCTYPE html>
<html>
<head>
  <title>SVG Export</title>
</head>
<body>
  <div id="sketch-container"></div>
</body>
</html>
`, { 
  resources: "usable",
  runScripts: "dangerously"
});

// Set up the global window object with necessary p5 and SVG functionality
const window = dom.window;
global.window = window;
global.document = window.document;
global.navigator = window.navigator;
global.screen = window.screen;

// Setup console logging
window.console = console;

// Load p5.js and p5.svg.js
const p5Code = fs.readFileSync(path.join(__dirname, '..', 'node_modules', 'p5', 'lib', 'p5.min.js'), 'utf-8');
const p5SVGCode = fs.readFileSync(path.join(__dirname, '..', 'node_modules', 'p5-svg', 'dist', 'p5.svg.js'), 'utf-8');

// Evaluate the libraries in the window context
const scriptP5 = window.document.createElement('script');
scriptP5.textContent = p5Code;
window.document.head.appendChild(scriptP5);

const scriptP5SVG = window.document.createElement('script');
scriptP5SVG.textContent = p5SVGCode;
window.document.head.appendChild(scriptP5SVG);

// Extract canvas dimensions from the sketch code
let canvasWidth = 600;
let canvasHeight = 800;

// Parse the sketch code to find canvas dimensions
try {
  const ast = acorn.parse(sketchCode, { ecmaVersion: 2020 });
  
  walk.simple(ast, {
    CallExpression(node) {
      if (node.callee.type === 'Identifier' && 
          node.callee.name === 'createCanvas' &&
          node.arguments.length >= 2) {
        
        // Extract width and height if they are numeric literals
        if (node.arguments[0].type === 'Literal') {
          canvasWidth = node.arguments[0].value;
        }
        if (node.arguments[1].type === 'Literal') {
          canvasHeight = node.arguments[1].value;
        }
      }
    }
  });
  
  console.log(`Detected canvas dimensions: ${canvasWidth}x${canvasHeight}`);
} catch (e) {
  console.warn('Could not parse sketch to find canvas dimensions, using defaults');
}

// Modify the sketch code to use SVG renderer
const modifiedSketchCode = `
// SVG Renderer setup
let SVGRenderer;

// Debug message for SVG availability
console.log('SVG available:', typeof SVG !== 'undefined');

// Override createCanvas to use SVG renderer
const originalCreateCanvas = window.createCanvas;
window.createCanvas = function(w, h) {
  console.log('Creating canvas with SVG renderer:', w, h);
  // Use SVG renderer explicitly
  return originalCreateCanvas(w, h, window.SVG);
};

// Original sketch code
${sketchCode}

// Function to extract SVG content after drawing
window.getSVGContent = function() {
  const svg = document.querySelector('svg');
  if (!svg) {
    console.error('No SVG element found in the document');
    return null;
  }
  console.log('SVG found:', svg.tagName, 'with', svg.children.length, 'children');
  return svg.outerHTML;
};

// Set a fixed seed for consistency
if (typeof window.seed === 'undefined') {
  window.seed = 12345;
}
`;

// Create and execute the modified sketch code
const sketchScript = window.document.createElement('script');
sketchScript.textContent = modifiedSketchCode;
window.document.body.appendChild(sketchScript);

// Wait a bit for the sketch to execute and render
setTimeout(() => {
  // Try to get the SVG content
  console.log('Checking for SVG content...');
  const svgContent = window.getSVGContent();
  
  if (!svgContent) {
    console.error('Failed to generate SVG content');
    process.exit(1);
  }
  
  // Add some basic post-processing for better SVG
  const enhancedSvgContent = svgContent
    .replace(/<svg/, '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"')
    .replace(/<\/svg>/, `
  <!-- Generated by residual-visual SVG export -->
</svg>`);
  
  // Prepare the output path
  const outputFileName = path.basename(sketchPath, '.js') + '.svg';
  const outputDir = path.join(__dirname, '..', 'output', 'svg');
  const outputPath = path.join(outputDir, outputFileName);
  
  // Ensure output directory exists
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  // Write the SVG content to file
  fs.writeFileSync(outputPath, enhancedSvgContent);
  console.log(`Vector SVG file created: ${outputPath}`);
  
  // Return success
  process.exit(0);
}, 2000); // Wait 2 seconds for the sketch to render 